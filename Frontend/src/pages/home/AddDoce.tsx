import { useAccount, useApi, useAlert } from "@gear-js/react-hooks";
import { web3FromSource } from "@polkadot/extension-dapp";
import { decodeAddress, ProgramMetadata } from "@gear-js/api";
import { Button } from "@chakra-ui/react";

function AddDoce({Dnombre,Dapellidos,Dmatricula,Dpeducativo,}:any) {
  const alert = useAlert();
  const { accounts, account } = useAccount();
  const { api } = useApi();

  // Add your programID
  const programIDNF =
    "0xdbce01261c4fb79fb1c4663de3fe192f8ba887116eb952463b891e95ea0b3736";

  // Add your metadata.txt
  const meta =
    "00010001000000000001040000000111000000000000000112000000c91564000808696f28496e6974537472756374000004014870726f6a6563745f70726f6772616d5f696404011c4163746f72496400000410106773746418636f6d6d6f6e287072696d6974697665731c4163746f724964000004000801205b75383b2033325d000008000003200000000c000c0000050300100808696f5450726f6a656374436f6e7472616374416374696f6e0001242c4e65775265676973747279040014011c50726f6a656374000000404275696c64657273526567697374727904003801204275696c646572730001002841646441756469746f72080004011c4163746f72496400003c011c41756469746f72000200284164644275696c646572080004011c4163746f724964000028011c4275696c6465720003003452656d6f766541756469746f72080004011c4163746f72496400003c011c41756469746f720004003452656d6f76654275696c646572080004011c4163746f724964000028011c4275696c6465720005001c50726f796563740400200110753132380006003444656c65746550726f796563740400200110753132380007002c416c6c50726f6a6563747300080000140808696f1c50726f6a65637400001c01106e616d65180118537472696e6700012c6465736372697074696f6e180118537472696e6700012c6d61696e5f77616c6c657404011c4163746f72496400012063617465676f72791c012043617465676f727900012c6e756d5f6d656d62657273200110753132380001206275696c646572732401305665633c4275696c6465723e000110696e666f340110496e666f00001800000502001c0808696f2043617465676f72790001181847616d696e670000001847616d65466900010010446546690002002c537570706c79436861696e0003001c546f6f6c696e670004003c496e6672616573747275637475726500050000200000050700240000022800280808696f1c4275696c646572000014011c6164647265737304011c4163746f724964000128657870657269656e6365200110753132380001246c616e6775616a65732c012c5665633c537472696e673e000118676974687562180118537472696e67000114737461746530011853746174757300002c0000021800300808696f18537461747573000108284f6e50726f67726573730000002446696e616c697a656400010000340808696f10496e666f00000c012c6e756d5f6d656d626572732001107531323800013070726573656e746174696f6e180118537472696e670001287265706f7369746f7279180118537472696e670000380808696f204275696c6465727300000c012c6e756d5f6d656d62657273200110753132380001206275696c646572732401305665633c4275696c6465723e000110696e666f340110496e666f00003c0808696f1c41756469746f72000008011c6164647265737304011c4163746f72496400012876616c69646174696f6e40012856616c69646174696f6e0000400808696f2856616c69646174696f6e00010c1c57616974696e67000000245265666c65637465640001002c53756363657366756c6c7900020000440808696f344576656e747350726f6a65637400010c2846697273744576656e740000002c5365636f6e644576656e740001002854686972644576656e7400020000480808696f2c416c6c50726f6a6563747300000c0128616c6c6275696c6465724c015c5665633c284163746f7249642c204275696c646572293e00012c616c6c61756469746f727354015c5665633c284163746f7249642c2041756469746f72293e00012c616c6c70726f6a656374735c01505665633c28753132382c2050726f6a656374293e00004c000002500050000004080428005400000258005800000408043c005c00000260006000000408201400";

  const metadata = ProgramMetadata.from(meta);

  const message: any = {
    destination: programIDNF, // programId
    payload: {
      NewRegistry: 
        {
          dnombre:Dnombre,
          dapellidos:Dapellidos,
          dmatricula:Dmatricula,
          dpeducativo:Dpeducativo,
        },
      
    }, 
    gasLimit: 2099819245,
    value: 0,
  };

  const signer = async () => {
    const localaccount = account?.address;
    const isVisibleAccount = accounts.some(
      (visibleAccount) => visibleAccount.address === localaccount
    );

    if (isVisibleAccount) {
      // Create a message extrinsic
      const transferExtrinsic = await api.message.send(message, metadata);

      const injector = await web3FromSource(accounts[0].meta.source);

      transferExtrinsic
        .signAndSend(
          ( account?.address ?? alert.error("No account")),
          { signer: injector.signer },
          ({ status }) => {
            if (status.isInBlock) {
              alert.success("Status");
            } else {
              console.log("transaction in Process");
              if (status.type === "Finalized") {
                alert.success(status.type);
              }
            }
          }
        )
        .catch((error: any) => {
          console.log(":( transaction failed", error);
        });
    } else {
      alert.error("Account not available to sign");
    }
  };
  return (
    <Button
      backgroundColor="#5DC6E0 "
      textColor="white"
      w="150px"
      h="40px"
      onClick={signer}
    >
      {" "}
      APPLY
    </Button>
  );
}
export { AddDoce };